{"version":3,"file":"index.js","sources":["../src/main.js"],"sourcesContent":["/*\n  Створи список справ.\n  На сторінці є два інпути які має вводиться назва і текст задачі.\n  Після натискання на кнопку \"Add\" завдання додається до списку #task-list.\n\n  У кожної картки має бути кнопка \"Delete\", щоб можна було\n  прибрати завдання зі списку.\n  Список із завданнями має бути доступним після перезавантаження сторінки.\n\n  Розмітка картки задачі\n  <li class=\"task-list-item\" data-id>\n      <button class=\"task-list-item-btn\">Delete</button>\n      <h3>Заголовок</h3>\n      <p>Текст</p>\n  </li>\n*/\n//\n//\n//\n//  main.js — для ініціалізації застосунку та основної логіки.\n//import/\n//\n\nimport { nanoid } from 'nanoid';\n// model.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B-myT\"\n\nconst form = document.querySelector('.header-form');\nform.addEventListener('submit', handleSubmit);\n\nconst list = document.querySelector('.tasks-list');\nlist.addEventListener('click', handkeClick);\n\nconst LS_KEY = 'tascs';\n\nlet datas = JSON.parse(localStorage.getItem(LS_KEY)) || [];\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const title = event.target.elements.taskName.value.trim();\n  const description = event.target.elements.taskDescription.value.trim();\n  // console.log(title);\n  // console.log(description);\n  if (!title || !description) {\n    return alert('Заповніть усі поля!!!');\n  }\n  const message = { title, description, id: nanoid() };\n  // console.log(message);\n  datas.push(message);\n  list.insertAdjacentHTML('beforeend', markupItem(message));\n\n  event.target.reset();\n  localStorage.setItem(LS_KEY, JSON.stringify(datas));\n}\n\nvisibleDatas(datas);\nfunction visibleDatas(datas) {\n  const markupItems = datas.map(markupItem).join('');\n  console.log(markupItems);\n\n  list.insertAdjacentHTML('beforeend', markupItems);\n}\n\nfunction markupItem({ title, description, id }) {\n  return `\n  <li class=\"task-list-item\" data-id=\"${id}\">\n      <button class=\"task-list-item-btn\">Delete</button>\n      <h3>${title}</h3>\n      <p>${description}</p>\n  </li>\n  `;\n}\n\nfunction handkeClick(event) {\n  if (event.target.classList.contains('task-list-item-btn')) {\n    console.log('ok');\n    // localStorage.removeItem(event.target);\n    const currentId = event.target.closest('[data-id]').dataset.id;\n    // console.log(event.target.closest('[data-id]').dataset.id);\n    datas = datas.filter(({ id }) => id !== currentId);\n    // презаписати датас,\n  }\n}\n"],"names":["form","handleSubmit","list","handkeClick","LS_KEY","datas","event","title","description","message","nanoid","markupItem","visibleDatas","markupItems","id","currentId"],"mappings":"svBA0BA,MAAMA,EAAO,SAAS,cAAc,cAAc,EAClDA,EAAK,iBAAiB,SAAUC,CAAY,EAE5C,MAAMC,EAAO,SAAS,cAAc,aAAa,EACjDA,EAAK,iBAAiB,QAASC,CAAW,EAE1C,MAAMC,EAAS,QAEf,IAAIC,EAAQ,KAAK,MAAM,aAAa,QAAQD,CAAM,CAAC,GAAK,GAExD,SAASH,EAAaK,EAAO,CAC3BA,EAAM,eAAc,EAEpB,MAAMC,EAAQD,EAAM,OAAO,SAAS,SAAS,MAAM,OAC7CE,EAAcF,EAAM,OAAO,SAAS,gBAAgB,MAAM,OAGhE,GAAI,CAACC,GAAS,CAACC,EACb,OAAO,MAAM,uBAAuB,EAEtC,MAAMC,EAAU,CAAE,MAAAF,EAAO,YAAAC,EAAa,GAAIE,EAAM,GAEhDL,EAAM,KAAKI,CAAO,EAClBP,EAAK,mBAAmB,YAAaS,EAAWF,CAAO,CAAC,EAExDH,EAAM,OAAO,QACb,aAAa,QAAQF,EAAQ,KAAK,UAAUC,CAAK,CAAC,CACpD,CAEAO,EAAaP,CAAK,EAClB,SAASO,EAAaP,EAAO,CAC3B,MAAMQ,EAAcR,EAAM,IAAIM,CAAU,EAAE,KAAK,EAAE,EACjD,QAAQ,IAAIE,CAAW,EAEvBX,EAAK,mBAAmB,YAAaW,CAAW,CAClD,CAEA,SAASF,EAAW,CAAE,MAAAJ,EAAO,YAAAC,EAAa,GAAAM,CAAE,EAAI,CAC9C,MAAO;AAAA,wCAC+BA,CAAE;AAAA;AAAA,YAE9BP,CAAK;AAAA,WACNC,CAAW;AAAA;AAAA,GAGtB,CAEA,SAASL,EAAYG,EAAO,CAC1B,GAAIA,EAAM,OAAO,UAAU,SAAS,oBAAoB,EAAG,CACzD,QAAQ,IAAI,IAAI,EAEhB,MAAMS,EAAYT,EAAM,OAAO,QAAQ,WAAW,EAAE,QAAQ,GAE5DD,EAAQA,EAAM,OAAO,CAAC,CAAE,GAAAS,KAASA,IAAOC,CAAS,CAElD,CACH"}